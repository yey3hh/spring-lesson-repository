<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosa.myproject.mapper.ProductMapper">
	<sql id="productColumns">
		product_id, product_name, maker, price, created_at
	</sql>

	<select id="getTotalProductCount" resultType="int">
		SELECT COUNT(*) FROM spring_product
	</select>
	
	<select id="findAllProductList" resultType="org.kosa.myproject.domain.Product">
		SELECT <include refid="productColumns" /> FROM spring_product
	</select>
	
	<select id="findProductById" parameterType="Long">
		SELECT <include refid="productColumns" /> FROM spring_product WHERE product_id = #{productId} 
	</select>
	
	<update id="updateProduct" parameterType="org.kosa.myproject.domain.Product">
		UPDATE spring_product SET product_name = #{productName}, maker = #{maker}, price = #{price} WHERE product_id = #{productId} 
	</update>
	
	<!-- 
		useGeneratedKeys="true" : 데이터베이스에서 자동 생성된 키를 사용하도록 설정
		keyProperty="productId" : 자동 생성된 키를 객체의 어떤 필드에 저장할지 지정 (객체의 인스턴스 변수 이름)
	-->
	<insert id="registerProduct" parameterType="org.kosa.myproject.domain.Product" useGeneratedKeys="true" keyProperty="productId">
		INSERT INTO spring_product(product_name, maker, price) VALUES(product_name = #{productName}, maker = #{maker}, price = #{price})
	</insert>
	
	<select id="findByPriceRange" resultType="org.kosa.myproject.domain.Product" parameterType="bigdecimal">
		SELECT <include refid="productColumns" /> FROM spring_product WHERE price BETWEEN #{minPrice} AND #{maxPrice};
	</select>
	
	<!--  
			MyBatis Dynamic SQL Study
			
			parameterType : 타입 추론하여 생략 가능 (map, vo/dto/domain, String 등 생략 가능)
							만약 컬렉션 개열은 타입 명시하는 것도 좋다.	
			
			searchKeyword1.put("maker", "삼성");
	-->
	<select id="findProductsDynamic" resultType="org.kosa.myproject.domain.Product">
		SELECT <include refid="productColumns" /> FROM spring_product 
		<where>
			<if test="maker != null and maker != ''">
				AND maker = #{maker}
			</if>
			
			<if test="productName != null and productName != ''">
				AND product_name LIKE CONCAT('%', #{productName}, '%') 
			</if>
			
			<if test="minPrice != null and maxPrice != null and minPrice != '' and maxPrice != ''">
				AND price BETWEEN #{minPrice} AND #{maxPrice}
			</if>
			
			<if test="searchPrice != null and searchPrice != ''">
				<![CDATA[
					AND price <= #{searchPrice}
				]]>
			</if>
		</where>
		ORDER BY created_at DESC	<!-- 중간에 ID로 하면 오토 크리트먼트로 이빨 빠질 수 있기 때문에 그걸 방지하려고 created_at로 정렬 -->
	</select>
	
	<!-- Dynamic SQL update 연습 -->
	<update id="updateProductDynamic">
		UPDATE spring_product
		<set>
			<if test="maker != null and maker != ''">
				maker = #{maker}, 
			</if>
			
			<if test="productName != null and productName != ''">
				product_name = #{productName},
			</if>
			
			<if test="price != null and price != ''">
				price = #{price},
			</if>
		</set>
		WHERE product_id = #{productId}
	</update>
</mapper>
