*** spring lesson note ***

주요 목차 (Spring 1차 프로젝트 전까지)
- Maven
- Git 형상관리
- Spring 관련 용어 정리
- IOC / DI 설정 스타일
	1) xml
	2) Annotation
	3) Java Config
- SpringBoot 소개 및 CommandLineRunner
- AOP 
- MyBatis Framework
- SpringMVC(Legacy)
- SpringBoot
- JUnit, Logging
- Thymeleaf
- Ajax / JSON
- CSS Framwork : Bootstrap
- Agile Scrum : Jira

------------------------------------------------
*** Spring 관련 용어 정리 ***

1. library : 라이브러리, 재사용 가능한 프로그램들의 모음
2. jar : 자바 프로그램 압축 확장자 (springboot application을 build 시 자동으로 생성)
3. war : 자바 웹어플리케이션 확장자
4. component : 독립적 기능단위를 가진 부품 (부품화되는 요소를 컴포넌트라고 함)
			   Bean => 자바 컴포넌트, 스프링에서 관리하는 컴포넌트(객체)를 Bean이라고 함
5. API : Application Programming Interface, 응용 프로그램을 개발하기 위해 제공하는 인터페이스
6. Framework : 사전적 의미는 틀, frame (틀) + work (일) => 일을 잘되게 하기 위해 제공하는 틀
			   반완전한 어플리케이션 -> 가능한 모든 요소를 지원하여 비즈니스에 집중하도록 함
7. Spring Framework : 자바 어플리케이션의 설계, 구현, 테스트, 운영에 대한 Infrastructure 기반을 제공함
					  다양한 컴포넌트 및 재사용 가능한 라이브러리와 디자인 패턴을 제공함
					  IOC/DI, AOP, SpringMVC, Data Access를 위한 MyBatis, JPA, 신속한 설정과 개발을 위한 SpringBoot, 
					  단위 테스트를 위한 JUnit, 보안을 위한 Srpign Security, MSA를 위한 Spring Cloud 등의 기술을 지원
					  
					  
*** Maven 의 핵심 역할 *** 
	: 프로젝트 관리 도구

의존성 관리 (Dependency Management)와 빌드 자동화 (Build Automation)

1. 의존성 관리 (Dependency Management)
필요 라이브러리를 일괄적으로 관리.
개념 : 프로젝트가 동작하기 위해 필요한 외부 라이브러리(JAR 파일 등)들을 자동으로 다운로드하고 관리하는 기능입니다.
Spring Boot의 Starter POMs : Spring Boot는 Maven의 의존성 관리 기능을 극대화하여 `spring-boot-starter-web`과 같은 "스타터 POM"을 제공합니다. 이 스타터 하나만 추가하면 웹 개발에 필요한 모든 의존성(Spring MVC, Tomcat 등)이 자동으로 설정되어 개발 초기 설정의 복잡성을 크게 줄여줍니다.

2. 빌드 자동화 (Build Automation)
프로젝트 완료 후 배포 deploy를 위해 jar or war로 build함
개념 : 소스 코드를 컴파일하고, 테스트를 실행하며, 패키징(JAR, WAR 파일 등)하여 배포 가능한 형태로 만드는 일련의 과정을 자동화하는 것을 의미합니다.

*** IOC와 DI/DL *** 

1. IOC
개념 : Inversion Of Control, 역제어, 제어의 역전 => 소프트웨어 설계 원리이자 디자인 패턴
	  객체 or Component or Bean 제어를 IOC Container에 위임
	  다시 말하면 필요 시 객체를 생성하는 것이 아니라 IOC Container로부터 필요한 객체를 받아오는 구조
	  WHY? => Loose Coupling 느슨한 결합도, 결합도란 모듈간의 상호 의존도, 결합도가 느슨해지면 확장성, 유지보수성 향상
2. DI
개념 : Dependency Injection, 의존성 주입 => 디자인 패턴
	  필요로 하는 의존성(Dependency : Bean or Component)을 주입(Injection)을 통해서 확보
	  IOC를 DI 기법을 통해 실현한다.
3. DL
개념 : Dependency Lookup, 의존성 검색 => 디자인 패턴
	  필요로 하는 의존성(Dependency : Bean or Component)을 검색(Lookup)을 통해서 확보
	  IOC를 DL 기법을 통해 실현한다.

*** ** *** Spring 설정 방식 *** ** ***
	: XML, Annotation, Java Config, properties 등이 있음
	  XML + Annotation 조합 또는 Annotation + Java Config 또는 XML + Annotation + Java Config + properties로 다양하게 조합될 수 있음

*** ** *** Spring Annotation Config *** ** ***

1. 컴포넌트 계열 어노테이션 : 스프링 컨테이너에게 해당 클래스가 bean 생성 대상임을 알리는 어노테이션. 나를 bean으로 만들어줘!!
						 Bean으로 생성되고 라이프 사이클 관리 및 싱글톤으로 운영됨
	- @Component : 컴포넌트 계열 상위 타입, 일반 컴포넌트 클래스에 명시, bean으로 생성 관리
2. 컴포넌트 계열 하위 어노테이션
	- @Controller : MVC 중 Controller(Rest Controller) 영역 Bean에 명시
	- @Service : Business 또는 Service Layer에 명시
	- @Repository : Data Access Object 또는 Persistence Layer에 명시
3. 설정 어노테이션
	- @Configuration : 해당 클래스가 Spring 설정 클래스임을 Spring Container에게 알리는 어노테이션
	- @Bean : @Configuration이 명시된 클래스 내부의 메서드에 사용하는 애너테이션
			  메서드의 리턴값을 Bean으로 생성해 관리, 주로 외부 라이브러리에 의한 객체를 Bean으로 생성관리할 때 사용
	- @ConponentScan(base package) : 지정한 base package와 그 하위의 모든 패키지들의 클래스들을 스캔해서 bean 생성과 DI를 실행
4. DI(Dependency Injection) 관련 어노테이션
	- @Autowired : 의존성 or bean or Component or 필요 객체를 타입으로 검색해 주입 (field, method, constructor 다 가능)
	- @Qualifier(bean name) : 만약 동일한 타입의 객체bean들이 여러개일 경우, 직접 bean name을 명시해서 주입받을 수 있음
그 외의 @Resource, @Inject 등이 DI 관련 어노테이션이 있음

*** ** *** DI *** ** ***
	: DI는 생성자Constructor를 통한 DI를 권장함
	
1. final field에 Constructor를 통한 DI를 권장하고 현업에서는 주로 이렇게 사용
  예) 
  	@Controller
  	public class MemberController {
  		Private final MemberService memberService;
		@Autowired	// 생략 가능 : 스프링 컨테이너가 의존성 주입 DI를 자동으로 해줌 	
		public Membercontroller(MemberService membserService){
			this.memberService = memberService;
		}
	} 
	
2. final fiel와 Constructor를 통한 DI를 권장하는 이유
	- 의존성 또는 Bean 또는 객체의 불변성 보장
		- final field (final 인스턴스 변수:상수화)는 생성자로 초기화 될 수 있음, 불변성은 멀티 스레딩시 안전
	- 의존성 확보가 보장됨. NPE(NullPointerException)을 사전에 방지할 수 있음
		- 참고로 Constructor Injection이 아닌 field Injection 또는 setter Injection은 의존성(필요로 하는 객체)을 주입하지 않아도 생성이 가능
		  -> Constructor Injection은 필요로하는 Bean or 객체 or 의존성을 반드시 주입해야 해당 객체가 생성 가능하다 => 확실한 의존성 주입을 보장
		  !! Spring IOC 컨테이너의 자동 DI (의존성 주입 기준)
	  		==> Spring 4.3 버전 이상 (2025.7. 기준 Spring 6버전) 부터 지원, 단일 생성자(매개변수 여러개 가능)에 한해 자동 주입(@Autowired 생략 가능)
	  			만약 생성자가 여러 개일 경우에는 DI 관련 Annotaiton을 명시해야 함
	
*** ** *** Spring Bean LifeCycle *** ** ***
Bean : 스프링 컨테이너가 관리하는 객체(컴포넌트)

Spring Container 실행(설정 로딩) -> Bean 생성 & DI -> 초기화 콜백(init callback) : @PostConstruct 생성 후 초기화 작업
-> 서비스 : Bean의 기능 실행 -> 소멸 콜백(destroy callback) : @PreDestroy, 소멸 직전 실행되는 작업 -> 종료

